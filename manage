#!/usr/bin/env bash
# -*- coding: utf-8; mode: sh indent-tabs-mode: nil -*-
# SPDX-License-Identifier: AGPL-3.0-or-later
# shellcheck disable=SC2034

main_cmd="$(basename "$0")"

# shellcheck source=utils_manage/config.sh
source "$(dirname "${BASH_SOURCE[0]}")/utils_manage/config.sh"

# shellcheck source=utils_manage/lib.sh
source "$(dirname "${BASH_SOURCE[0]}")/utils_manage/lib.sh"

# shellcheck source=utils_manage/static.sh
source "$(dirname "${BASH_SOURCE[0]}")/utils_manage/static.sh"

# shellcheck source=utils_manage/python.sh
source "$(dirname "${BASH_SOURCE[0]}")/utils_manage/python.sh"

# shellcheck source=utils_manage/tests.sh
source "$(dirname "${BASH_SOURCE[0]}")/utils_manage/tests.sh"

# shellcheck source=utils_manage/docs.sh
source "$(dirname "${BASH_SOURCE[0]}")/utils_manage/docs.sh"

# shellcheck source=utils_manage/weblate.sh
source "$(dirname "${BASH_SOURCE[0]}")/utils_manage/weblate.sh"

# shellcheck source=utils_manage/nvm.sh
source "$(dirname "${BASH_SOURCE[0]}")/utils_manage/nvm.sh"

# shellcheck source=utils_manage/themes.sh
source "$(dirname "${BASH_SOURCE[0]}")/utils_manage/themes.sh"

# shellcheck source=utils_manage/data.sh
source "$(dirname "${BASH_SOURCE[0]}")/utils_manage/data.sh"

# shellcheck source=utils_manage/docker.sh
source "$(dirname "${BASH_SOURCE[0]}")/utils_manage/docker.sh"


help() {
    cat <<EOF
run         : run developer instance
EOF
    tests.help
    python.help
    docs.help
    docker.help
    themes.help
    static.help
    nvm.help
    data.help
    weblate.help
    cat <<EOF
environment ...
  SEARXNG_REDIS_URL : ${SEARXNG_REDIS_URL}
EOF
}

run() {
    # make sure the virtualenv is setup correctly before opening the browser
    pyenv.install

    local parent_proc="$$"
    (
        if [ "${LIVE_THEME}" ]; then
            ( themes.live "${LIVE_THEME}" )
            kill $parent_proc
        fi
    )&
    (
        sleep 3
        xdg-open http://127.0.0.1:8888/
    )&
    SEARXNG_DEBUG=1 pyenv.cmd python -m searx.webapp
}

# shellcheck disable=SC2119
main() {

    local _type
    local cmd="$1"; shift

    if [ "$cmd" == "" ]; then
        help
        err_msg "missing command"
        return 42
    fi

    case "$cmd" in
        --getenv) var="$1"; echo "${!var}";;
        --help) help;;
        --*)
            help
            err_msg "unknown option $cmd"
            return 42
            ;;
        *)
            _type="$(type -t "$cmd")"
            if [ "$_type" != 'function' ]; then
                err_msg "unknown command: $cmd / use --help"
                return 42
            else
                "$cmd" "$@"
            fi
            ;;
    esac
}

main "$@"
